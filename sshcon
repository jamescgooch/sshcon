
#!/bin/bash
#sshcon
#ssh connection manager script for bash
#Copyright (c) 2020, James Gooch
#All rights reserved.

#Free to use free to share. 

#Notes: sudo chmod 777 sshcon
#Notes: ./sshcon
#Notes:
#Notes: After editing make binary to conceal any details added and move to bin so you can run sshcon
#Notes: shc -f sshcon | mv sshcon.x /usr/bin/sshcon
#Notes:
#Notes: to start without dependency checks run: bash <(sed -n '82,$p' sshcon

clear
echo
echo "Checking dependencies....."

WE_NEED_THIS="tmux"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $WE_NEED_THIS|grep "install ok installed")
echo Checking for $WE_NEED_THIS: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $WE_NEED_THIS. Setting up $WE_NEED_THIS."
  sudo apt-get --yes install $WE_NEED_THIS 
fi

WE_NEED_THIS="gcc"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $WE_NEED_THIS|grep "install ok installed")
echo Checking for $WE_NEED_THIS: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $WE_NEED_THIS. Setting up $WE_NEED_THIS."
  sudo apt-get --yes install $WE_NEED_THIS 
fi

WE_NEED_THIS="shc"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $WE_NEED_THIS|grep "install ok installed")
echo Checking for $WE_NEED_THIS: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $WE_NEED_THIS. Setting up $WE_NEED_THIS."
  sudo apt-get --yes install $WE_NEED_THIS 
fi

WE_NEED_THIS="ssh"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $WE_NEED_THIS|grep "install ok installed")
echo Checking for $WE_NEED_THIS: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $WE_NEED_THIS. Setting up $WE_NEED_THIS."
  sudo apt-get --yes install $WE_NEED_THIS
fi

WE_NEED_THIS="sed"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $WE_NEED_THIS|grep "install ok installed")
echo Checking for $WE_NEED_THIS: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $WE_NEED_THIS. Setting up $WE_NEED_THIS."
  sudo apt-get --yes install $WE_NEED_THIS
fi

WE_NEED_THIS="dnsutils"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $WE_NEED_THIS|grep "install ok installed")
echo Checking for $WE_NEED_THIS: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $WE_NEED_THIS. Setting up $WE_NEED_THIS."
  sudo apt-get --yes install $WE_NEED_THIS
fi

WE_NEED_THIS="cowsay"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $WE_NEED_THIS|grep "install ok installed")
echo Checking for $WE_NEED_THIS: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $WE_NEED_THIS. Setting up $WE_NEED_THIS."
  sudo apt-get --yes install $WE_NEED_THIS 
fi

echo
echo

cowsay -f eyes "dependencies met. checking bash."

read -n 1 -s -r -p "Press any key to check bash requirements"

clear
echo
echo

#checking for bash ending if not in bash

if [ -z "${BASH_VERSINFO+x}" ]; then
    #laters 
    echo 'this shell is not supported by sshconnect, please exit to bash and run again' && exit
else
    echo 'bash shell detected: checking network and port ttls'
fi

shell_name="$(ps -o comm= -p $$)"
#echo "${shell_name##*[[:cntrl:][:punct:][:space:]]}" this will be added later leave it alone or dont idc 

echo
clear

#!/bin/bash
#this is here just in case your starting this script from line 82


cowsay -f eyes "welcome to sshconnect."

echo

# using paste we are making fake tables and using netstat and grep to listen on ports
# just change the port number in the echo statement and after grep in each line for your own needs.  

paste -d' | ' <(echo "Port 80 ttls: ") <(netstat -tn 2>/dev/null | grep :80 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head) <(echo "Port 22 ttls: ") <(netstat -tn 2>/dev/null | grep :22 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head)
echo

paste -d' | ' <(echo "Port 443 ttls: ") <(netstat -tn 2>/dev/null | grep :443 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head) <(echo "Port 2420 ttls: ") <(netstat -tn 2>/dev/null | grep :2420 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head)  
echo

paste -d' | ' <(echo "Your local IP Address is:") <(hostname -I) <(echo " Your External IP is:") <(dig +short myip.opendns.com @resolver1.opendns.com)
echo

#Menu

PS3='Choose your SSH connnection:'
sshconnections=("BASH" "ZSH" "TMUX" "ServerOne" "ServerTwo" "ServerThree" "ServerFour" "Quit")
select ThisSSH in "${sshconnections[@]}"; do
    case $ThisSSH in
	"BASH")
         clear && exit && bash	    
            ;;
        "ZSH")
	        zsh
            ;;
        "TMUX")
            tmux new-session \; split-window -h \; split-window -v \; attach
	        ;;
#fill this out with your ssh connections
#try not to include your passwords unless your going to encrypt this file
        "ServerOne")
           echo "connecting"
           ssh 0.0.0.0 -p 420 -l username
            ;;
        "ServerTwo")
           echo "connecting"
           ssh -l user domain.com
            ;;
	    "ServerThree")
           echo "connecting"
	       ssh -i user.pem user@domain
	        ;;
        "ServerFour")
           echo "connecting"    
           ssh -i user.pem user@0.0.0.0
            break
            ;;
        "Quit")
            echo "Good-Bye"
            exit
    esac
done


